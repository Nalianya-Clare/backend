# Generated by Django 5.2 on 2025-04-29 21:31

import account.models
import django.core.validators
import django.db.models.deletion
import util.storage_location.utils
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(blank=True, default='', max_length=150, null=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z]*$', message='Only alphanumeric characters are allowed.')], verbose_name='User Name')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(blank=True, default='', max_length=125, null=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z]*$', message='Only alphanumeric characters are allowed.')], verbose_name='First name')),
                ('last_name', models.CharField(blank=True, default='', max_length=125, null=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z]*$', message='Only alphanumeric characters are allowed.')], verbose_name='Last name')),
                ('phone', models.CharField(blank=True, default='', max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+(\\d{1,4})\\s(\\d{7,10})$', message='Invalid phone format. accepted format is (+254 xxxxxxxxx)')], verbose_name='Phone number')),
                ('profile_picture', models.ImageField(blank=True, default='', null=True, storage=util.storage_location.utils.PublicMediaStorage(), upload_to='uploads/user/profile/', verbose_name='Profile picture')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('others', 'Others')], max_length=20, null=True)),
                ('profession', models.CharField(blank=True, choices=[('gynecologist', 'gynecologist'), ('obstetricians', 'obstetricians'), ('other', 'Other')], max_length=50, null=True)),
                ('verified', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.                                                     Unselect this instead of deleting accounts.', verbose_name='Active')),
                ('is_superuser', models.BooleanField(default=False, help_text='Grants the all system privileges to the user', verbose_name='Super Admin status')),
                ('is_medical_staff', models.BooleanField(default=False, help_text='Designates whether the user is a medical staff.', verbose_name='Medical Staff')),
                ('is_approved_staff', models.BooleanField(default=False, help_text='Designates whether the user is an approved medical staff.', verbose_name='Approved Staff')),
                ('auth_provider', models.CharField(blank=True, default='email', max_length=255, null=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('password_expiry_date', models.DateTimeField(blank=True, null=True)),
                ('role', models.CharField(blank=True, choices=[('user', 'User'), ('admin', 'Medical Staff'), ('super', 'Super Admin')], default='user', max_length=20, null=True, verbose_name='User role')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['date_joined'],
            },
            managers=[
                ('objects', account.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LoggedInUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_key', models.CharField(blank=True, max_length=32, null=True)),
                ('refresh_token', models.CharField(blank=True, max_length=600, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='logged_in_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
